{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nexport function useSocket(url = 'http://localhost:4000') {\n  const socketRef = useRef(null);\n  useEffect(() => {\n    // Connect only once\n    if (!socketRef.current) {\n      socketRef.current = io(url);\n    }\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [url]);\n  return socketRef.current;\n}\n\n// This custom hook connects to a WebSocket server using Socket.IO.\n// It listens for messages on the 'game:update' event and calls the provided callback function when a message is received.\n// The socket connection is established when the component mounts and cleaned up when it unmounts.\n\n// The `onMessage` parameter allows the user to define a custom callback function to handle incoming messages.\n\n// The socket connection is established to 'http://localhost:5000', which should match the server's address.\n// The `useEffect` hook ensures that the socket connection is created only once when the component mounts and cleaned up when it unmounts.\n// The `console.log` statement confirms the successful connection to the socket server by logging the socket ID.","map":{"version":3,"names":["useEffect","useRef","io","useSocket","url","socketRef","current","disconnect"],"sources":["/Users/devlogic/Documents/NBASIM_Project_Full/client/src/hooks/useSocket.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\n\nexport function useSocket(url = 'http://localhost:4000') {\n  const socketRef = useRef(null);\n\n  useEffect(() => {\n    // Connect only once\n    if (!socketRef.current) {\n      socketRef.current = io(url);\n    }\n\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [url]);\n\n  return socketRef.current;\n}\n\n// This custom hook connects to a WebSocket server using Socket.IO.\n// It listens for messages on the 'game:update' event and calls the provided callback function when a message is received.\n// The socket connection is established when the component mounts and cleaned up when it unmounts.\n\n// The `onMessage` parameter allows the user to define a custom callback function to handle incoming messages.\n\n// The socket connection is established to 'http://localhost:5000', which should match the server's address.\n// The `useEffect` hook ensures that the socket connection is created only once when the component mounts and cleaned up when it unmounts.\n// The `console.log` statement confirms the successful connection to the socket server by logging the socket ID."],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,EAAE,QAAQ,kBAAkB;AAErC,OAAO,SAASC,SAASA,CAACC,GAAG,GAAG,uBAAuB,EAAE;EACvD,MAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACK,SAAS,CAACC,OAAO,EAAE;MACtBD,SAAS,CAACC,OAAO,GAAGJ,EAAE,CAACE,GAAG,CAAC;IAC7B;IAEA,OAAO,MAAM;MACX,IAAIC,SAAS,CAACC,OAAO,EAAE;QACrBD,SAAS,CAACC,OAAO,CAACC,UAAU,CAAC,CAAC;QAC9BF,SAAS,CAACC,OAAO,GAAG,IAAI;MAC1B;IACF,CAAC;EACH,CAAC,EAAE,CAACF,GAAG,CAAC,CAAC;EAET,OAAOC,SAAS,CAACC,OAAO;AAC1B;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}