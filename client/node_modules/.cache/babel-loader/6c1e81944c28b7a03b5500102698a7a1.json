{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { fetchPlayers } from '../api/api';\nexport function usePlayers(teamId, season) {\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!teamId || !season) return;\n    setLoading(true);\n    fetchPlayers(teamId, season).then(setPlayers).catch(setError).finally(() => setLoading(false));\n  }, [teamId, season]);\n  return {\n    players,\n    loading,\n    error\n  };\n}","map":{"version":3,"names":["useEffect","useState","fetchPlayers","usePlayers","teamId","season","players","setPlayers","loading","setLoading","error","setError","then","catch","finally"],"sources":["/Users/devlogic/Documents/NBASIM_Project_Full/client/src/hooks/usePlayers.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { fetchPlayers } from '../api/api';\n\nexport function usePlayers(teamId, season) {\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!teamId || !season) return;\n    setLoading(true);\n    fetchPlayers(teamId, season)\n      .then(setPlayers)\n      .catch(setError)\n      .finally(() => setLoading(false));\n  }, [teamId, season]);\n\n  return { players, loading, error };\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,YAAY;AAEzC,OAAO,SAASC,UAAUA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACI,MAAM,IAAI,CAACC,MAAM,EAAE;IACxBI,UAAU,CAAC,IAAI,CAAC;IAChBP,YAAY,CAACE,MAAM,EAAEC,MAAM,CAAC,CACzBO,IAAI,CAACL,UAAU,CAAC,CAChBM,KAAK,CAACF,QAAQ,CAAC,CACfG,OAAO,CAAC,MAAML,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,CAACL,MAAM,EAAEC,MAAM,CAAC,CAAC;EAEpB,OAAO;IAAEC,OAAO;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module"}