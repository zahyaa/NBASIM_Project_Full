{"ast":null,"code":"var _jsxFileName = \"/Users/devlogic/Documents/NBASIM_Project_Full/client/src/components/Roster.jsx\";\n//User should be able to select roster from a team, and then select players from that roster.\n//Roster can be from any time period in the NBA\n\nimport React, { useState, useEffect } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { usePlayers } from '../hooks/usePlayers';\nimport { useTeams } from '../hooks/useTeams';\nimport TeamDisplay from './TeamDisplay';\nimport SelectTeam from './SelectTeam';\nimport Controls from './Controls';\nimport GameHistory from './GameHistory';\nimport { useSocket } from '../hooks/useSocket';\nexport default function Roster() {\n  const {\n    teamA,\n    teamB,\n    setTeamA,\n    setTeamB,\n    isRunning,\n    isPaused,\n    startGame,\n    pauseGame,\n    stopGame,\n    timeout\n  } = useGameContext();\n  const teams = useTeams();\n  const playersA = usePlayers(teamA);\n  const playersB = usePlayers(teamB);\n  const socket = useSocket();\n  useEffect(() => {\n    socket.on('gameUpdate', data => {\n      // Handle game updates from the server\n      console.log('Game update received:', data);\n    });\n    return () => {\n      socket.off('gameUpdate');\n    };\n  }, [socket]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mx-auto p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-2xl font-bold mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"NBA Roster Selection\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col md:flex-row gap-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SelectTeam, {\n    teamId: 1,\n    setTeamId: setTeamA,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SelectTeam, {\n    teamId: 2,\n    setTeamId: setTeamB,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-xl font-semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Selected Teams\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col md:flex-row gap-4 mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, teamA && /*#__PURE__*/React.createElement(TeamDisplay, {\n    teamName: teamA,\n    players: playersA,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }), teamB && /*#__PURE__*/React.createElement(TeamDisplay, {\n    teamName: teamB,\n    players: playersB,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Controls, {\n    isRunning: isRunning,\n    isPaused: isPaused,\n    onStart: startGame,\n    onStop: stopGame,\n    onPause: pauseGame,\n    onTimeout: team => timeout(team),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GameHistory, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n}\n// This component allows users to select NBA teams and view their rosters.\n// It uses custom hooks to fetch teams and players, and displays the selected teams with their players.\n// The component also includes controls for starting, pausing, and stopping the game,\n// as well as managing timeouts for each team.\n// The game history is displayed at the bottom, showing past games and their results.\n// The component is designed to be responsive and user-friendly, making it easy for users to interact with the NBA roster selection process.\n// The component integrates with a WebSocket to receive real-time game updates,\n\n// allowing for dynamic updates to the game state without needing to refresh the page.\n// This enhances the user experience by providing immediate feedback on game actions and events.\n// The use of Tailwind CSS classes ensures a clean and modern design, making the component visually appealing.","map":{"version":3,"names":["React","useState","useEffect","useGameContext","usePlayers","useTeams","TeamDisplay","SelectTeam","Controls","GameHistory","useSocket","Roster","teamA","teamB","setTeamA","setTeamB","isRunning","isPaused","startGame","pauseGame","stopGame","timeout","teams","playersA","playersB","socket","on","data","console","log","off","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","teamId","setTeamId","teamName","players","onStart","onStop","onPause","onTimeout","team"],"sources":["/Users/devlogic/Documents/NBASIM_Project_Full/client/src/components/Roster.jsx"],"sourcesContent":["//User should be able to select roster from a team, and then select players from that roster.\n//Roster can be from any time period in the NBA\n\nimport React, { useState, useEffect } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { usePlayers } from '../hooks/usePlayers';\nimport { useTeams } from '../hooks/useTeams';\nimport TeamDisplay from './TeamDisplay';\nimport SelectTeam from './SelectTeam';\nimport Controls from './Controls';\nimport GameHistory from './GameHistory';\nimport { useSocket } from '../hooks/useSocket';\n\nexport default function Roster() {\n  const { teamA, teamB, setTeamA, setTeamB, isRunning, isPaused, startGame, pauseGame, stopGame, timeout } = useGameContext();\n  const teams = useTeams();\n  const playersA = usePlayers(teamA);\n  const playersB = usePlayers(teamB);\n  const socket = useSocket();\n\n  useEffect(() => {\n    socket.on('gameUpdate', (data) => {\n      // Handle game updates from the server\n      console.log('Game update received:', data);\n    });\n\n    return () => {\n      socket.off('gameUpdate');\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">NBA Roster Selection</h1>\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <SelectTeam teamId={1} setTeamId={setTeamA} />\n        <SelectTeam teamId={2} setTeamId={setTeamB} />\n      </div>\n      <div className=\"mt-6\">\n        <h2 className=\"text-xl font-semibold\">Selected Teams</h2>\n        <div className=\"flex flex-col md:flex-row gap-4 mt-4\">\n          {teamA && <TeamDisplay teamName={teamA} players={playersA} />}\n          {teamB && <TeamDisplay teamName={teamB} players={playersB} />}\n        </div>\n      </div>\n      <Controls\n        isRunning={isRunning}\n        isPaused={isPaused}\n        onStart={startGame}\n        onStop={stopGame}\n        onPause={pauseGame}\n        onTimeout={(team) => timeout(team)}\n      />\n      <GameHistory />\n    </div>\n  );\n}\n// This component allows users to select NBA teams and view their rosters.\n// It uses custom hooks to fetch teams and players, and displays the selected teams with their players.\n// The component also includes controls for starting, pausing, and stopping the game,\n// as well as managing timeouts for each team.\n// The game history is displayed at the bottom, showing past games and their results.\n// The component is designed to be responsive and user-friendly, making it easy for users to interact with the NBA roster selection process.\n// The component integrates with a WebSocket to receive real-time game updates,\n\n// allowing for dynamic updates to the game state without needing to refresh the page.\n// This enhances the user experience by providing immediate feedback on game actions and events.\n// The use of Tailwind CSS classes ensures a clean and modern design, making the component visually appealing.\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}